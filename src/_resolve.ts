import { ApiObject } from './api-object';
import { Lazy } from './lazy';
import { IValueResolver, ResolutionContext } from './value-resolver';

export function resolve(key: string[], value: any, apiObject: ApiObject, resolver?: IValueResolver): any {

  if (value == null) {
    return value;
  }

  // cdk8s token
  if (value instanceof Lazy) {
    const resolved = value.produce();
    return resolve(key, resolved, apiObject, resolver);
  }

  // implicit token as generated by the cdk8s-cli (e.g IntOrString)
  if (typeof (value.resolve) === 'function') {
    const resolved = value.resolve();
    return resolve(key, resolved, apiObject, resolver);
  }

  if (typeof (value) !== 'object') {

    if (resolver) {
      const context = new ResolutionContext(apiObject, key, value);
      resolver.resolve(context);
      return context.newValue;
    } else {
      return value;
    }
  }

  if (Array.isArray(value)) {
    return value.map((x, i) => resolve([...key, `${i}`], x, apiObject, resolver));
  }

  const result: any = {};

  for (const [k, v] of Object.entries(value)) {
    result[k] = resolve([...key, k], v, apiObject, resolver);
  }

  return result;

}

import { ApiObject } from './api-object';
import { Lazy } from './lazy';

export class ResolutionContext {

  private _newValue: any;

  constructor(
    public readonly obj: ApiObject,
    public readonly key: string[],
    public readonly value: any) {
    this._newValue = value;
  }

  public replaceValue(newValue: any) {
    this._newValue = newValue;
  }

  public get newValue(): any {
    return this._newValue;
  }

}

export interface IResolver {

  resolve(context: ResolutionContext): void;
}

export class LazyResolver implements IResolver {

  public resolve(context: ResolutionContext): void {
    if (context.value instanceof Lazy) {
      const resolved = context.value.produce();
      context.replaceValue(resolved);
    }
  }
}

export class ImplicitTokenResolver implements IResolver {

  public resolve(context: ResolutionContext): void {

    if (typeof (context.value.resolve) === 'function') {
      const resolved = context.value.resolve();
      context.replaceValue(resolved);
    }

  }

}

export function resolve(key: string[], value: any, apiObject: ApiObject, resolver?: IResolver): any {

  if (value == null) {
    return value;
  }

  // cdk8s lazy
  if (value instanceof Lazy) {
    const resolved = value.produce();
    return resolve(key, resolved, apiObject, resolver);
  }

  // implicit token as generated by the cdk8s-cli (e.g IntOrString)
  if (typeof (value.resolve) === 'function') {
    const resolved = value.resolve();
    return resolve(key, resolved, apiObject, resolver);
  }

  if (typeof (value) !== 'object') {

    if (resolver) {
      const context = new ResolutionContext(apiObject, key, value);
      resolver.resolve(context);
      return context.newValue;
    } else {
      return value;
    }
  }

  if (Array.isArray(value)) {
    return value.map((x, i) => resolve([...key, `${i}`], x, apiObject, resolver));
  }



}
